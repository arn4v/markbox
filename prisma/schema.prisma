generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  auth0Id           String?            @unique @map("auth0_id")
  name              String             @default("")
  password          String?
  type              String             @default("email")
  emailVerified     Boolean            @default(false) @map("email_verified")
  email             String             @unique
  bookmarks         Bookmark[]
  tags              Tag[]
  keys              AccessToken[]
  collections       Collection[]
  collectionInvites CollectionInvite[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum InviteType {
  READ_ONLY
  FULL_ACCESS
}

model CollectionInvite {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id])
  type      InviteType

  userId       String
  Collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  @@map("collection_invites")
}

model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name           String
  isPublic       Boolean            @default(false)
  hashedPassword String?
  views          BigInt             @default(0)
  tags           Tag[]
  invites        CollectionInvite[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("collections")
}

model AccessToken {
  id        String   @id @default(uuid())
  name      String
  scopes    Json     @default("[]")
  lastUsed  DateTime @default(now()) @map("last_used")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("access_tokens")
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String
  isPinned  Boolean    @default(false) @map("is_pinned")
  bookmarks Bookmark[]

  User         User?       @relation(fields: [userId], references: [id])
  userId       String?
  Collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  @@map("tags")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String    @db.VarChar(1000)
  url         String    @db.VarChar(1000)
  isFavourite Boolean   @default(false) @map("is_favourite")
  description String    @default("") @db.VarChar(1000)
  tags        Tag[]
  importedAt  DateTime? @map("imported_at")

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("bookmarks")
}
