// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run generate to update

import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type AddUpdateBookmarkInput = {
  title: Scalars["String"];
  url: Scalars["String"];
  tags: Array<Scalars["String"]>;
};

export type AuthenticationMessage = {
  __typename?: "AuthenticationMessage";
  code: Scalars["String"];
  message: Scalars["String"];
};

export type Bookmark = {
  __typename?: "Bookmark";
  id: Scalars["ID"];
  title: Scalars["String"];
  url: Scalars["String"];
  tags: Array<Scalars["String"]>;
};

export type Mutation = {
  __typename?: "Mutation";
  login?: Maybe<AuthenticationMessage>;
  register?: Maybe<AuthenticationMessage>;
  addBookmark?: Maybe<Bookmark>;
  updateBookmark?: Maybe<Bookmark>;
};

export type MutationLoginArgs = {
  email: Scalars["String"];
  password: Scalars["String"];
};

export type MutationRegisterArgs = {
  email: Scalars["String"];
  password: Scalars["String"];
};

export type MutationAddBookmarkArgs = {
  input?: Maybe<AddUpdateBookmarkInput>;
};

export type MutationUpdateBookmarkArgs = {
  id: Scalars["ID"];
  input?: Maybe<AddUpdateBookmarkInput>;
};

export type Query = {
  __typename?: "Query";
  bookmark: Bookmark;
  bookmarks: Array<Bookmark>;
};

export type QueryBookmarkArgs = {
  id: Scalars["ID"];
};

export type AddBookmarkMutationVariables = Exact<{
  id: Scalars["ID"];
  input?: Maybe<AddUpdateBookmarkInput>;
}>;

export type AddBookmarkMutation = {
  __typename?: "Mutation";
  updateBookmark?: Maybe<{
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  }>;
};

export type UpdateBookmarkMutationVariables = Exact<{
  id: Scalars["ID"];
  input?: Maybe<AddUpdateBookmarkInput>;
}>;

export type UpdateBookmarkMutation = {
  __typename?: "Mutation";
  updateBookmark?: Maybe<{
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  }>;
};

export type GetAllBookmarksQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllBookmarksQuery = {
  __typename?: "Query";
  bookmarks: Array<{
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  }>;
};

export type GetBookmarkQueryVariables = Exact<{
  id: Scalars["ID"];
}>;

export type GetBookmarkQuery = {
  __typename?: "Query";
  bookmark: {
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  };
};

export const AddBookmarkDocument = gql`
  mutation AddBookmark($id: ID!, $input: AddUpdateBookmarkInput) {
    updateBookmark(id: $id, input: $input) {
      id
      title
      url
      tags
    }
  }
`;
export type AddBookmarkMutationFn = Apollo.MutationFunction<
  AddBookmarkMutation,
  AddBookmarkMutationVariables
>;

/**
 * __useAddBookmarkMutation__
 *
 * To run a mutation, you first call `useAddBookmarkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddBookmarkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addBookmarkMutation, { data, loading, error }] = useAddBookmarkMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddBookmarkMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddBookmarkMutation,
    AddBookmarkMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<AddBookmarkMutation, AddBookmarkMutationVariables>(
    AddBookmarkDocument,
    options,
  );
}
export type AddBookmarkMutationHookResult = ReturnType<
  typeof useAddBookmarkMutation
>;
export type AddBookmarkMutationResult =
  Apollo.MutationResult<AddBookmarkMutation>;
export type AddBookmarkMutationOptions = Apollo.BaseMutationOptions<
  AddBookmarkMutation,
  AddBookmarkMutationVariables
>;
export const UpdateBookmarkDocument = gql`
  mutation UpdateBookmark($id: ID!, $input: AddUpdateBookmarkInput) {
    updateBookmark(id: $id, input: $input) {
      id
      title
      url
      tags
    }
  }
`;
export type UpdateBookmarkMutationFn = Apollo.MutationFunction<
  UpdateBookmarkMutation,
  UpdateBookmarkMutationVariables
>;

/**
 * __useUpdateBookmarkMutation__
 *
 * To run a mutation, you first call `useUpdateBookmarkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBookmarkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBookmarkMutation, { data, loading, error }] = useUpdateBookmarkMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateBookmarkMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateBookmarkMutation,
    UpdateBookmarkMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateBookmarkMutation,
    UpdateBookmarkMutationVariables
  >(UpdateBookmarkDocument, options);
}
export type UpdateBookmarkMutationHookResult = ReturnType<
  typeof useUpdateBookmarkMutation
>;
export type UpdateBookmarkMutationResult =
  Apollo.MutationResult<UpdateBookmarkMutation>;
export type UpdateBookmarkMutationOptions = Apollo.BaseMutationOptions<
  UpdateBookmarkMutation,
  UpdateBookmarkMutationVariables
>;
export const GetAllBookmarksDocument = gql`
  query GetAllBookmarks {
    bookmarks {
      id
      title
      url
      tags
    }
  }
`;

/**
 * __useGetAllBookmarksQuery__
 *
 * To run a query within a React component, call `useGetAllBookmarksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllBookmarksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllBookmarksQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllBookmarksQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAllBookmarksQuery,
    GetAllBookmarksQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetAllBookmarksQuery, GetAllBookmarksQueryVariables>(
    GetAllBookmarksDocument,
    options,
  );
}
export function useGetAllBookmarksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllBookmarksQuery,
    GetAllBookmarksQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllBookmarksQuery,
    GetAllBookmarksQueryVariables
  >(GetAllBookmarksDocument, options);
}
export type GetAllBookmarksQueryHookResult = ReturnType<
  typeof useGetAllBookmarksQuery
>;
export type GetAllBookmarksLazyQueryHookResult = ReturnType<
  typeof useGetAllBookmarksLazyQuery
>;
export type GetAllBookmarksQueryResult = Apollo.QueryResult<
  GetAllBookmarksQuery,
  GetAllBookmarksQueryVariables
>;
export const GetBookmarkDocument = gql`
  query GetBookmark($id: ID!) {
    bookmark(id: $id) {
      id
      title
      url
      tags
    }
  }
`;

/**
 * __useGetBookmarkQuery__
 *
 * To run a query within a React component, call `useGetBookmarkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBookmarkQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBookmarkQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBookmarkQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetBookmarkQuery,
    GetBookmarkQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetBookmarkQuery, GetBookmarkQueryVariables>(
    GetBookmarkDocument,
    options,
  );
}
export function useGetBookmarkLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetBookmarkQuery,
    GetBookmarkQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetBookmarkQuery, GetBookmarkQueryVariables>(
    GetBookmarkDocument,
    options,
  );
}
export type GetBookmarkQueryHookResult = ReturnType<typeof useGetBookmarkQuery>;
export type GetBookmarkLazyQueryHookResult = ReturnType<
  typeof useGetBookmarkLazyQuery
>;
export type GetBookmarkQueryResult = Apollo.QueryResult<
  GetBookmarkQuery,
  GetBookmarkQueryVariables
>;
