/* eslint-disable */
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run generate to update

import { GraphQLResolveInfo } from "graphql";
import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = {
  [X in Exclude<keyof T, K>]?: T[X];
} &
  { [P in K]-?: NonNullable<T[P]> };
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type AuthenticationMessage = {
  __typename?: "AuthenticationMessage";
  code: Scalars["String"];
  message: Scalars["String"];
};

export type Bookmark = {
  __typename?: "Bookmark";
  id: Scalars["ID"];
  title: Scalars["String"];
  url: Scalars["String"];
  tags: Array<Scalars["String"]>;
};

export type CreateBookmarkInput = {
  title: Scalars["String"];
  url: Scalars["String"];
  tags: Array<Scalars["String"]>;
};

export type LoginMessage = {
  __typename?: "LoginMessage";
  code: Scalars["String"];
  message: Scalars["String"];
  accessToken?: Maybe<Scalars["String"]>;
};

export type Mutation = {
  __typename?: "Mutation";
  login?: Maybe<LoginMessage>;
  register?: Maybe<AuthenticationMessage>;
  createBookmark?: Maybe<Bookmark>;
  updateBookmark?: Maybe<Bookmark>;
};

export type MutationLoginArgs = {
  email: Scalars["String"];
  password: Scalars["String"];
};

export type MutationRegisterArgs = {
  email: Scalars["String"];
  password: Scalars["String"];
};

export type MutationCreateBookmarkArgs = {
  input: CreateBookmarkInput;
};

export type MutationUpdateBookmarkArgs = {
  id: Scalars["ID"];
  input: UpdateBookmarkInput;
};

export type Query = {
  __typename?: "Query";
  bookmark: Bookmark;
  bookmarks: Array<Bookmark>;
  user?: Maybe<User>;
};

export type QueryBookmarkArgs = {
  id: Scalars["ID"];
};

export type UpdateBookmarkInput = {
  title?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
  tags?: Maybe<Array<Scalars["String"]>>;
};

export type User = {
  __typename?: "User";
  id: Scalars["ID"];
  email: Scalars["String"];
  emailVerified: Scalars["Boolean"];
  createdAt: Scalars["String"];
  updatedAt: Scalars["String"];
};

export type LoginMutationVariables = Exact<{
  email: Scalars["String"];
  password: Scalars["String"];
}>;

export type LoginMutation = {
  __typename?: "Mutation";
  login?: Maybe<{
    __typename?: "LoginMessage";
    code: string;
    message: string;
    accessToken?: Maybe<string>;
  }>;
};

export type RegisterMutationVariables = Exact<{
  email: Scalars["String"];
  password: Scalars["String"];
}>;

export type RegisterMutation = {
  __typename?: "Mutation";
  register?: Maybe<{
    __typename?: "AuthenticationMessage";
    code: string;
    message: string;
  }>;
};

export type CreateBookmarkInputMutationVariables = Exact<{
  id: Scalars["ID"];
  input: CreateBookmarkInput;
}>;

export type CreateBookmarkInputMutation = {
  __typename?: "Mutation";
  createBookmark?: Maybe<{
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  }>;
};

export type UpdateBookmarkMutationVariables = Exact<{
  id: Scalars["ID"];
  input: UpdateBookmarkInput;
}>;

export type UpdateBookmarkMutation = {
  __typename?: "Mutation";
  updateBookmark?: Maybe<{
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  }>;
};

export type GetAllBookmarksQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllBookmarksQuery = {
  __typename?: "Query";
  bookmarks: Array<{
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  }>;
};

export type GetBookmarkQueryVariables = Exact<{
  id: Scalars["ID"];
}>;

export type GetBookmarkQuery = {
  __typename?: "Query";
  bookmark: {
    __typename?: "Bookmark";
    id: string;
    title: string;
    url: string;
    tags: Array<string>;
  };
};

export type UserQueryVariables = Exact<{ [key: string]: never }>;

export type UserQuery = {
  __typename?: "Query";
  user?: Maybe<{
    __typename?: "User";
    id: string;
    email: string;
    emailVerified: boolean;
    createdAt: string;
    updatedAt: string;
  }>;
};

export const LoginDocument = gql`
  mutation Login($email: String!, $password: String!) {
    login(email: $email, password: $password) {
      code
      message
      accessToken
    }
  }
`;
export type LoginMutationFn = Apollo.MutationFunction<
  LoginMutation,
  LoginMutationVariables
>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(
  baseOptions?: Apollo.MutationHookOptions<
    LoginMutation,
    LoginMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(
    LoginDocument,
    options,
  );
}
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<
  LoginMutation,
  LoginMutationVariables
>;
export const RegisterDocument = gql`
  mutation Register($email: String!, $password: String!) {
    register(email: $email, password: $password) {
      code
      message
    }
  }
`;
export type RegisterMutationFn = Apollo.MutationFunction<
  RegisterMutation,
  RegisterMutationVariables
>;

/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [registerMutation, { data, loading, error }] = useRegisterMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useRegisterMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RegisterMutation,
    RegisterMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(
    RegisterDocument,
    options,
  );
}
export type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;
export type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;
export type RegisterMutationOptions = Apollo.BaseMutationOptions<
  RegisterMutation,
  RegisterMutationVariables
>;
export const CreateBookmarkInputDocument = gql`
  mutation CreateBookmarkInput($id: ID!, $input: CreateBookmarkInput!) {
    createBookmark(input: $input) {
      id
      title
      url
      tags
    }
  }
`;
export type CreateBookmarkInputMutationFn = Apollo.MutationFunction<
  CreateBookmarkInputMutation,
  CreateBookmarkInputMutationVariables
>;

/**
 * __useCreateBookmarkInputMutation__
 *
 * To run a mutation, you first call `useCreateBookmarkInputMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBookmarkInputMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBookmarkInputMutation, { data, loading, error }] = useCreateBookmarkInputMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateBookmarkInputMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateBookmarkInputMutation,
    CreateBookmarkInputMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateBookmarkInputMutation,
    CreateBookmarkInputMutationVariables
  >(CreateBookmarkInputDocument, options);
}
export type CreateBookmarkInputMutationHookResult = ReturnType<
  typeof useCreateBookmarkInputMutation
>;
export type CreateBookmarkInputMutationResult =
  Apollo.MutationResult<CreateBookmarkInputMutation>;
export type CreateBookmarkInputMutationOptions = Apollo.BaseMutationOptions<
  CreateBookmarkInputMutation,
  CreateBookmarkInputMutationVariables
>;
export const UpdateBookmarkDocument = gql`
  mutation UpdateBookmark($id: ID!, $input: UpdateBookmarkInput!) {
    updateBookmark(id: $id, input: $input) {
      id
      title
      url
      tags
    }
  }
`;
export type UpdateBookmarkMutationFn = Apollo.MutationFunction<
  UpdateBookmarkMutation,
  UpdateBookmarkMutationVariables
>;

/**
 * __useUpdateBookmarkMutation__
 *
 * To run a mutation, you first call `useUpdateBookmarkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBookmarkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBookmarkMutation, { data, loading, error }] = useUpdateBookmarkMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateBookmarkMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateBookmarkMutation,
    UpdateBookmarkMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateBookmarkMutation,
    UpdateBookmarkMutationVariables
  >(UpdateBookmarkDocument, options);
}
export type UpdateBookmarkMutationHookResult = ReturnType<
  typeof useUpdateBookmarkMutation
>;
export type UpdateBookmarkMutationResult =
  Apollo.MutationResult<UpdateBookmarkMutation>;
export type UpdateBookmarkMutationOptions = Apollo.BaseMutationOptions<
  UpdateBookmarkMutation,
  UpdateBookmarkMutationVariables
>;
export const GetAllBookmarksDocument = gql`
  query GetAllBookmarks {
    bookmarks {
      id
      title
      url
      tags
    }
  }
`;

/**
 * __useGetAllBookmarksQuery__
 *
 * To run a query within a React component, call `useGetAllBookmarksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllBookmarksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllBookmarksQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllBookmarksQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAllBookmarksQuery,
    GetAllBookmarksQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetAllBookmarksQuery, GetAllBookmarksQueryVariables>(
    GetAllBookmarksDocument,
    options,
  );
}
export function useGetAllBookmarksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllBookmarksQuery,
    GetAllBookmarksQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllBookmarksQuery,
    GetAllBookmarksQueryVariables
  >(GetAllBookmarksDocument, options);
}
export type GetAllBookmarksQueryHookResult = ReturnType<
  typeof useGetAllBookmarksQuery
>;
export type GetAllBookmarksLazyQueryHookResult = ReturnType<
  typeof useGetAllBookmarksLazyQuery
>;
export type GetAllBookmarksQueryResult = Apollo.QueryResult<
  GetAllBookmarksQuery,
  GetAllBookmarksQueryVariables
>;
export const GetBookmarkDocument = gql`
  query GetBookmark($id: ID!) {
    bookmark(id: $id) {
      id
      title
      url
      tags
    }
  }
`;

/**
 * __useGetBookmarkQuery__
 *
 * To run a query within a React component, call `useGetBookmarkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBookmarkQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBookmarkQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBookmarkQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetBookmarkQuery,
    GetBookmarkQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetBookmarkQuery, GetBookmarkQueryVariables>(
    GetBookmarkDocument,
    options,
  );
}
export function useGetBookmarkLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetBookmarkQuery,
    GetBookmarkQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetBookmarkQuery, GetBookmarkQueryVariables>(
    GetBookmarkDocument,
    options,
  );
}
export type GetBookmarkQueryHookResult = ReturnType<typeof useGetBookmarkQuery>;
export type GetBookmarkLazyQueryHookResult = ReturnType<
  typeof useGetBookmarkLazyQuery
>;
export type GetBookmarkQueryResult = Apollo.QueryResult<
  GetBookmarkQuery,
  GetBookmarkQueryVariables
>;
export const UserDocument = gql`
  query User {
    user {
      id
      email
      emailVerified
      createdAt
      updatedAt
    }
  }
`;

/**
 * __useUserQuery__
 *
 * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserQuery(
  baseOptions?: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, options);
}
export function useUserLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(
    UserDocument,
    options,
  );
}
export type UserQueryHookResult = ReturnType<typeof useUserQuery>;
export type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;
export type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;
export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> =
  | LegacyStitchingResolver<TResult, TParent, TContext, TArgs>
  | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs,
> {
  subscribe: SubscriptionSubscribeFn<
    { [key in TKey]: TResult },
    TParent,
    TContext,
    TArgs
  >;
  resolve?: SubscriptionResolveFn<
    TResult,
    { [key in TKey]: TResult },
    TContext,
    TArgs
  >;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs,
> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<
  TResult,
  TKey extends string,
  TParent = {},
  TContext = {},
  TArgs = {},
> =
  | ((
      ...args: any[]
    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo,
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
  obj: T,
  context: TContext,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<
  TResult = {},
  TParent = {},
  TContext = {},
  TArgs = {},
> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  AuthenticationMessage: ResolverTypeWrapper<AuthenticationMessage>;
  String: ResolverTypeWrapper<Scalars["String"]>;
  Bookmark: ResolverTypeWrapper<Bookmark>;
  ID: ResolverTypeWrapper<Scalars["ID"]>;
  CreateBookmarkInput: CreateBookmarkInput;
  LoginMessage: ResolverTypeWrapper<LoginMessage>;
  Mutation: ResolverTypeWrapper<{}>;
  Query: ResolverTypeWrapper<{}>;
  UpdateBookmarkInput: UpdateBookmarkInput;
  User: ResolverTypeWrapper<User>;
  Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  AuthenticationMessage: AuthenticationMessage;
  String: Scalars["String"];
  Bookmark: Bookmark;
  ID: Scalars["ID"];
  CreateBookmarkInput: CreateBookmarkInput;
  LoginMessage: LoginMessage;
  Mutation: {};
  Query: {};
  UpdateBookmarkInput: UpdateBookmarkInput;
  User: User;
  Boolean: Scalars["Boolean"];
}>;

export type AuthenticationMessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["AuthenticationMessage"] = ResolversParentTypes["AuthenticationMessage"],
> = ResolversObject<{
  code?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  message?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BookmarkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Bookmark"] = ResolversParentTypes["Bookmark"],
> = ResolversObject<{
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  title?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  url?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  tags?: Resolver<Array<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LoginMessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["LoginMessage"] = ResolversParentTypes["LoginMessage"],
> = ResolversObject<{
  code?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  message?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  accessToken?: Resolver<
    Maybe<ResolversTypes["String"]>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MutationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Mutation"] = ResolversParentTypes["Mutation"],
> = ResolversObject<{
  login?: Resolver<
    Maybe<ResolversTypes["LoginMessage"]>,
    ParentType,
    ContextType,
    RequireFields<MutationLoginArgs, "email" | "password">
  >;
  register?: Resolver<
    Maybe<ResolversTypes["AuthenticationMessage"]>,
    ParentType,
    ContextType,
    RequireFields<MutationRegisterArgs, "email" | "password">
  >;
  createBookmark?: Resolver<
    Maybe<ResolversTypes["Bookmark"]>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateBookmarkArgs, "input">
  >;
  updateBookmark?: Resolver<
    Maybe<ResolversTypes["Bookmark"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateBookmarkArgs, "id" | "input">
  >;
}>;

export type QueryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"],
> = ResolversObject<{
  bookmark?: Resolver<
    ResolversTypes["Bookmark"],
    ParentType,
    ContextType,
    RequireFields<QueryBookmarkArgs, "id">
  >;
  bookmarks?: Resolver<
    Array<ResolversTypes["Bookmark"]>,
    ParentType,
    ContextType
  >;
  user?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType>;
}>;

export type UserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["User"] = ResolversParentTypes["User"],
> = ResolversObject<{
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  email?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  emailVerified?: Resolver<ResolversTypes["Boolean"], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = any> = ResolversObject<{
  AuthenticationMessage?: AuthenticationMessageResolvers<ContextType>;
  Bookmark?: BookmarkResolvers<ContextType>;
  LoginMessage?: LoginMessageResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
}>;

/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
