/* eslint-disable */
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run generate to update

import { GraphQLResolveInfo } from "graphql";
import {
	useMutation,
	UseMutationOptions,
	useQuery,
	UseQueryOptions,
} from "react-query";
import { fetcher } from "./fetcher";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
	[K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
	{ [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
	{ [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = {
	[X in Exclude<keyof T, K>]?: T[X];
} &
	{ [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
	ID: string;
	String: string;
	Boolean: boolean;
	Int: number;
	Float: number;
};

export type AuthenticationMessage = {
	__typename?: "AuthenticationMessage";
	code: Scalars["String"];
	message: Scalars["String"];
};

export type Bookmark = {
	__typename?: "Bookmark";
	id: Scalars["ID"];
	title: Scalars["String"];
	url: Scalars["String"];
	tags: Array<Scalars["String"]>;
	createdAt: Scalars["String"];
	updatedAt: Scalars["String"];
};

export type CreateBookmarkInput = {
	title: Scalars["String"];
	url: Scalars["String"];
	tags: Array<Scalars["String"]>;
};

export type LoginMessage = {
	__typename?: "LoginMessage";
	code: Scalars["String"];
	message: Scalars["String"];
	accessToken?: Maybe<Scalars["String"]>;
};

export type Mutation = {
	__typename?: "Mutation";
	login?: Maybe<LoginMessage>;
	register?: Maybe<AuthenticationMessage>;
	createBookmark?: Maybe<Bookmark>;
	updateBookmark?: Maybe<Bookmark>;
	deleteBookmark?: Maybe<Scalars["Boolean"]>;
};

export type MutationLoginArgs = {
	email: Scalars["String"];
	password: Scalars["String"];
};

export type MutationRegisterArgs = {
	email: Scalars["String"];
	password: Scalars["String"];
};

export type MutationCreateBookmarkArgs = {
	input: CreateBookmarkInput;
};

export type MutationUpdateBookmarkArgs = {
	id: Scalars["ID"];
	input: UpdateBookmarkInput;
};

export type MutationDeleteBookmarkArgs = {
	id: Scalars["ID"];
};

export type Query = {
	__typename?: "Query";
	bookmark: Bookmark;
	bookmarks: Array<Bookmark>;
	user?: Maybe<User>;
};

export type QueryBookmarkArgs = {
	id: Scalars["ID"];
};

export type UpdateBookmarkInput = {
	title?: Maybe<Scalars["String"]>;
	url?: Maybe<Scalars["String"]>;
	tags?: Maybe<Array<Scalars["String"]>>;
};

export type User = {
	__typename?: "User";
	id: Scalars["ID"];
	email: Scalars["String"];
	emailVerified: Scalars["Boolean"];
	createdAt: Scalars["String"];
};

export type CreateBookmarkMutationVariables = Exact<{
	input: CreateBookmarkInput;
}>;

export type CreateBookmarkMutation = {
	__typename?: "Mutation";
	createBookmark?: Maybe<{
		__typename?: "Bookmark";
		id: string;
		title: string;
		url: string;
		tags: Array<string>;
		createdAt: string;
		updatedAt: string;
	}>;
};

export type DeleteBookmarkMutationVariables = Exact<{
	id: Scalars["ID"];
}>;

export type DeleteBookmarkMutation = {
	__typename?: "Mutation";
	deleteBookmark?: Maybe<boolean>;
};

export type LoginMutationVariables = Exact<{
	email: Scalars["String"];
	password: Scalars["String"];
}>;

export type LoginMutation = {
	__typename?: "Mutation";
	login?: Maybe<{ __typename?: "LoginMessage"; code: string; message: string }>;
};

export type RegisterMutationVariables = Exact<{
	email: Scalars["String"];
	password: Scalars["String"];
}>;

export type RegisterMutation = {
	__typename?: "Mutation";
	register?: Maybe<{
		__typename?: "AuthenticationMessage";
		code: string;
		message: string;
	}>;
};

export type UpdateBookmarkMutationVariables = Exact<{
	id: Scalars["ID"];
	input: UpdateBookmarkInput;
}>;

export type UpdateBookmarkMutation = {
	__typename?: "Mutation";
	updateBookmark?: Maybe<{
		__typename?: "Bookmark";
		id: string;
		title: string;
		url: string;
		tags: Array<string>;
		createdAt: string;
		updatedAt: string;
	}>;
};

export type GetAllBookmarksQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllBookmarksQuery = {
	__typename?: "Query";
	bookmarks: Array<{
		__typename?: "Bookmark";
		id: string;
		title: string;
		url: string;
		tags: Array<string>;
		createdAt: string;
		updatedAt: string;
	}>;
};

export type GetBookmarkQueryVariables = Exact<{
	id: Scalars["ID"];
}>;

export type GetBookmarkQuery = {
	__typename?: "Query";
	bookmark: {
		__typename?: "Bookmark";
		id: string;
		title: string;
		url: string;
		tags: Array<string>;
		createdAt: string;
		updatedAt: string;
	};
};

export type UserQueryVariables = Exact<{ [key: string]: never }>;

export type UserQuery = {
	__typename?: "Query";
	user?: Maybe<{
		__typename?: "User";
		id: string;
		email: string;
		emailVerified: boolean;
		createdAt: string;
	}>;
};

export type ResolverTypeWrapper<T> = Promise<T> | T;

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
	fragment: string;
	resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
	selectionSet: string;
	resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> =
	| LegacyStitchingResolver<TResult, TParent, TContext, TArgs>
	| NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
	| ResolverFn<TResult, TParent, TContext, TArgs>
	| StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
	parent: TParent,
	args: TArgs,
	context: TContext,
	info: GraphQLResolveInfo,
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
	parent: TParent,
	args: TArgs,
	context: TContext,
	info: GraphQLResolveInfo,
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
	parent: TParent,
	args: TArgs,
	context: TContext,
	info: GraphQLResolveInfo,
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<
	TResult,
	TKey extends string,
	TParent,
	TContext,
	TArgs,
> {
	subscribe: SubscriptionSubscribeFn<
		{ [key in TKey]: TResult },
		TParent,
		TContext,
		TArgs
	>;
	resolve?: SubscriptionResolveFn<
		TResult,
		{ [key in TKey]: TResult },
		TContext,
		TArgs
	>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
	subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
	resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<
	TResult,
	TKey extends string,
	TParent,
	TContext,
	TArgs,
> =
	| SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
	| SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<
	TResult,
	TKey extends string,
	TParent = {},
	TContext = {},
	TArgs = {},
> =
	| ((
			...args: any[]
	  ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
	| SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
	parent: TParent,
	context: TContext,
	info: GraphQLResolveInfo,
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
	obj: T,
	context: TContext,
	info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<
	TResult = {},
	TParent = {},
	TContext = {},
	TArgs = {},
> = (
	next: NextResolverFn<TResult>,
	parent: TParent,
	args: TArgs,
	context: TContext,
	info: GraphQLResolveInfo,
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
	AuthenticationMessage: ResolverTypeWrapper<AuthenticationMessage>;
	String: ResolverTypeWrapper<Scalars["String"]>;
	Bookmark: ResolverTypeWrapper<Bookmark>;
	ID: ResolverTypeWrapper<Scalars["ID"]>;
	CreateBookmarkInput: CreateBookmarkInput;
	LoginMessage: ResolverTypeWrapper<LoginMessage>;
	Mutation: ResolverTypeWrapper<{}>;
	Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
	Query: ResolverTypeWrapper<{}>;
	UpdateBookmarkInput: UpdateBookmarkInput;
	User: ResolverTypeWrapper<User>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
	AuthenticationMessage: AuthenticationMessage;
	String: Scalars["String"];
	Bookmark: Bookmark;
	ID: Scalars["ID"];
	CreateBookmarkInput: CreateBookmarkInput;
	LoginMessage: LoginMessage;
	Mutation: {};
	Boolean: Scalars["Boolean"];
	Query: {};
	UpdateBookmarkInput: UpdateBookmarkInput;
	User: User;
};

export type AuthenticationMessageResolvers<
	ContextType = any,
	ParentType extends ResolversParentTypes["AuthenticationMessage"] = ResolversParentTypes["AuthenticationMessage"],
> = {
	code?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	message?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	__isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BookmarkResolvers<
	ContextType = any,
	ParentType extends ResolversParentTypes["Bookmark"] = ResolversParentTypes["Bookmark"],
> = {
	id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
	title?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	url?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	tags?: Resolver<Array<ResolversTypes["String"]>, ParentType, ContextType>;
	createdAt?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	updatedAt?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	__isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LoginMessageResolvers<
	ContextType = any,
	ParentType extends ResolversParentTypes["LoginMessage"] = ResolversParentTypes["LoginMessage"],
> = {
	code?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	message?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	accessToken?: Resolver<
		Maybe<ResolversTypes["String"]>,
		ParentType,
		ContextType
	>;
	__isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<
	ContextType = any,
	ParentType extends ResolversParentTypes["Mutation"] = ResolversParentTypes["Mutation"],
> = {
	login?: Resolver<
		Maybe<ResolversTypes["LoginMessage"]>,
		ParentType,
		ContextType,
		RequireFields<MutationLoginArgs, "email" | "password">
	>;
	register?: Resolver<
		Maybe<ResolversTypes["AuthenticationMessage"]>,
		ParentType,
		ContextType,
		RequireFields<MutationRegisterArgs, "email" | "password">
	>;
	createBookmark?: Resolver<
		Maybe<ResolversTypes["Bookmark"]>,
		ParentType,
		ContextType,
		RequireFields<MutationCreateBookmarkArgs, "input">
	>;
	updateBookmark?: Resolver<
		Maybe<ResolversTypes["Bookmark"]>,
		ParentType,
		ContextType,
		RequireFields<MutationUpdateBookmarkArgs, "id" | "input">
	>;
	deleteBookmark?: Resolver<
		Maybe<ResolversTypes["Boolean"]>,
		ParentType,
		ContextType,
		RequireFields<MutationDeleteBookmarkArgs, "id">
	>;
};

export type QueryResolvers<
	ContextType = any,
	ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"],
> = {
	bookmark?: Resolver<
		ResolversTypes["Bookmark"],
		ParentType,
		ContextType,
		RequireFields<QueryBookmarkArgs, "id">
	>;
	bookmarks?: Resolver<
		Array<ResolversTypes["Bookmark"]>,
		ParentType,
		ContextType
	>;
	user?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType>;
};

export type UserResolvers<
	ContextType = any,
	ParentType extends ResolversParentTypes["User"] = ResolversParentTypes["User"],
> = {
	id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
	email?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	emailVerified?: Resolver<ResolversTypes["Boolean"], ParentType, ContextType>;
	createdAt?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
	__isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
	AuthenticationMessage?: AuthenticationMessageResolvers<ContextType>;
	Bookmark?: BookmarkResolvers<ContextType>;
	LoginMessage?: LoginMessageResolvers<ContextType>;
	Mutation?: MutationResolvers<ContextType>;
	Query?: QueryResolvers<ContextType>;
	User?: UserResolvers<ContextType>;
};

/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;

export const CreateBookmarkDocument = `
    mutation CreateBookmark($input: CreateBookmarkInput!) {
  createBookmark(input: $input) {
    id
    title
    url
    tags
    createdAt
    updatedAt
  }
}
    `;
export const useCreateBookmarkMutation = <TError = unknown, TContext = unknown>(
	options?: UseMutationOptions<
		CreateBookmarkMutation,
		TError,
		CreateBookmarkMutationVariables,
		TContext
	>,
) =>
	useMutation<
		CreateBookmarkMutation,
		TError,
		CreateBookmarkMutationVariables,
		TContext
	>(
		(variables?: CreateBookmarkMutationVariables) =>
			fetcher<CreateBookmarkMutation, CreateBookmarkMutationVariables>(
				CreateBookmarkDocument,
				variables,
			)(),
		options,
	);
export const DeleteBookmarkDocument = `
    mutation DeleteBookmark($id: ID!) {
  deleteBookmark(id: $id)
}
    `;
export const useDeleteBookmarkMutation = <TError = unknown, TContext = unknown>(
	options?: UseMutationOptions<
		DeleteBookmarkMutation,
		TError,
		DeleteBookmarkMutationVariables,
		TContext
	>,
) =>
	useMutation<
		DeleteBookmarkMutation,
		TError,
		DeleteBookmarkMutationVariables,
		TContext
	>(
		(variables?: DeleteBookmarkMutationVariables) =>
			fetcher<DeleteBookmarkMutation, DeleteBookmarkMutationVariables>(
				DeleteBookmarkDocument,
				variables,
			)(),
		options,
	);
export const LoginDocument = `
    mutation Login($email: String!, $password: String!) {
  login(email: $email, password: $password) {
    code
    message
  }
}
    `;
export const useLoginMutation = <TError = unknown, TContext = unknown>(
	options?: UseMutationOptions<
		LoginMutation,
		TError,
		LoginMutationVariables,
		TContext
	>,
) =>
	useMutation<LoginMutation, TError, LoginMutationVariables, TContext>(
		(variables?: LoginMutationVariables) =>
			fetcher<LoginMutation, LoginMutationVariables>(
				LoginDocument,
				variables,
			)(),
		options,
	);
export const RegisterDocument = `
    mutation Register($email: String!, $password: String!) {
  register(email: $email, password: $password) {
    code
    message
  }
}
    `;
export const useRegisterMutation = <TError = unknown, TContext = unknown>(
	options?: UseMutationOptions<
		RegisterMutation,
		TError,
		RegisterMutationVariables,
		TContext
	>,
) =>
	useMutation<RegisterMutation, TError, RegisterMutationVariables, TContext>(
		(variables?: RegisterMutationVariables) =>
			fetcher<RegisterMutation, RegisterMutationVariables>(
				RegisterDocument,
				variables,
			)(),
		options,
	);
export const UpdateBookmarkDocument = `
    mutation UpdateBookmark($id: ID!, $input: UpdateBookmarkInput!) {
  updateBookmark(id: $id, input: $input) {
    id
    title
    url
    tags
    createdAt
    updatedAt
  }
}
    `;
export const useUpdateBookmarkMutation = <TError = unknown, TContext = unknown>(
	options?: UseMutationOptions<
		UpdateBookmarkMutation,
		TError,
		UpdateBookmarkMutationVariables,
		TContext
	>,
) =>
	useMutation<
		UpdateBookmarkMutation,
		TError,
		UpdateBookmarkMutationVariables,
		TContext
	>(
		(variables?: UpdateBookmarkMutationVariables) =>
			fetcher<UpdateBookmarkMutation, UpdateBookmarkMutationVariables>(
				UpdateBookmarkDocument,
				variables,
			)(),
		options,
	);
export const GetAllBookmarksDocument = `
    query GetAllBookmarks {
  bookmarks {
    id
    title
    url
    tags
    createdAt
    updatedAt
  }
}
    `;
export const useGetAllBookmarksQuery = <
	TData = GetAllBookmarksQuery,
	TError = unknown,
>(
	variables?: GetAllBookmarksQueryVariables,
	options?: UseQueryOptions<GetAllBookmarksQuery, TError, TData>,
) =>
	useQuery<GetAllBookmarksQuery, TError, TData>(
		["GetAllBookmarks", variables],
		fetcher<GetAllBookmarksQuery, GetAllBookmarksQueryVariables>(
			GetAllBookmarksDocument,
			variables,
		),
		options,
	);
export const GetBookmarkDocument = `
    query GetBookmark($id: ID!) {
  bookmark(id: $id) {
    id
    title
    url
    tags
    createdAt
    updatedAt
  }
}
    `;
export const useGetBookmarkQuery = <TData = GetBookmarkQuery, TError = unknown>(
	variables: GetBookmarkQueryVariables,
	options?: UseQueryOptions<GetBookmarkQuery, TError, TData>,
) =>
	useQuery<GetBookmarkQuery, TError, TData>(
		["GetBookmark", variables],
		fetcher<GetBookmarkQuery, GetBookmarkQueryVariables>(
			GetBookmarkDocument,
			variables,
		),
		options,
	);
export const UserDocument = `
    query User {
  user {
    id
    email
    emailVerified
    createdAt
  }
}
    `;
export const useUserQuery = <TData = UserQuery, TError = unknown>(
	variables?: UserQueryVariables,
	options?: UseQueryOptions<UserQuery, TError, TData>,
) =>
	useQuery<UserQuery, TError, TData>(
		["User", variables],
		fetcher<UserQuery, UserQueryVariables>(UserDocument, variables),
		options,
	);
